const fs = require("fs");
const path = require("path");
const resolveFrom = require("../packages/resolve-from");
const tmp = require("@swissquote/crafty-commons/packages/tmp");

/**
 * Extract all configuration from "crafty jsLint" that won't be understood by `eslint`
 *
 * @param {*} args
 * @returns
 */
function extractConfig(args) {
  const presets = [];
  let configFile;

  let idx;
  if (args.indexOf("--preset") > -1) {
    while ((idx = args.indexOf("--preset")) > -1) {
      presets.push(args[idx + 1]);

      args.splice(idx, 2);
    }
  } else {
    presets.push("format");
  }

  if ((idx = args.indexOf("--config")) > -1) {
    configFile = args[idx + 1];
    args.splice(idx, 2);
  }

  return {
    presets,
    configFile
  };
}

/**
 * Plugins can be present only once
 * Since we want to load the plugins only when needed we still want to declare them the closest to where they're needed.
 * This step makes sure that plugins appear only once in the final configuration
 */
function deduplicatePlugins(configs) {
  const seenPlugin = new Set();

  configs.forEach((config, index) => {
    if (!config.plugins) {
      return;
    }

    const pluginNames = Object.keys(config.plugins);

    let hasDuplicates = false;
    const newPluginMap = {};
    for (const pluginName of pluginNames) {
      if (seenPlugin.has(pluginName)) {
        hasDuplicates = true;
      } else {
        seenPlugin.add(pluginName);
        newPluginMap[pluginName] = config.plugins[pluginName];
      }
    }

    if (hasDuplicates) {
      // Clone the original config in case it's used more than once
      const cloned = { ...config };
      cloned.plugins = newPluginMap;
      configs[index] = cloned;
    }
  });
}

function toESLintConfig(crafty, config = {}) {
  const configs = [];

  // Load configuration presets
  if (config.presets) {
    for (const preset of config.presets) {
      const subConfigs = require(`@swissquote/eslint-plugin-swissquote`)
        .configs[preset];
      configs.push(...subConfigs);
    }
  }

  // Override from default config if it exists
  if (crafty?.config?.eslint) {
    configs.push(...crafty.config.eslint);
  }

  // Load other configuration files
  if (config.configFile) {
    // TODO : handle ESM and async
    const subConfigs = require(resolveFrom.silent(
      process.cwd(),
      config.configFile
    ) || path.join(process.cwd(), config.configFile));

    if (!Array.isArray(subConfigs)) {
      throw new Error(
        `Expected ${
          config.configFile
        } to be an array of configuration but got ${typeof subConfigs}`
      );
    }

    configs.push(...subConfigs);
  }

  // TODO :: apply only on `jsLint`
  configs.push({
    rules: {
      // Disable `no-var` as this linter can also be run
      // on es5 code, if used with --fix, the result
      // would be broken code or false positives.
      "no-var": 0
    }
  });

  deduplicatePlugins(configs);

  return configs;
}

/*

√: Yes
~: Maybe but not mandatory
X: Should not

| Item                        | IDE | Tool | jsLint |
| --------------------------- | --- | ---- | ------ |
| Read `crafty.config.js`     | √   | √    | X      |
| Use Crafty defaults         | √   | √    | X      |
| Extra presets from CLI      | X   | X    | √      |

*/

const ESLINT_PRESET_PATH = require.resolve("@swissquote/crafty-preset-eslint");
const CRAFTY_PATH = require.resolve("@swissquote/crafty");

/**
 * IDE Configuration generation.
 *
 * @param {Crafty} crafty
 * @returns
 */
function ideConfiguration(crafty) {
  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
// This file helps IDEs autoconfigure themselves
// any change here will only be used by your IDE, not by Crafty

/* global process */

module.exports = (async () => {
  const { initialize } = await import("@swissquote/crafty");
  const { toESLintConfig } = await import("@swissquote/crafty-preset-eslint");
  
  const crafty = await initialize(process.argv, ${JSON.stringify(
    crafty.presetsFromCli,
    null,
    2
  )});
  
  const config = toESLintConfig(crafty, {});
  
  return config;
})();
`;
}

/**
 * Configuration for other tools
 *
 * @param {Crafty} crafty
 * @returns
 */
function toolConfiguration(crafty) {
  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT

import { initialize } from "${CRAFTY_PATH}";
import { toESLintConfig } from "${ESLINT_PRESET_PATH}";

const crafty = await initialize(process.argv, ${JSON.stringify(
    crafty.presetsFromCli,
    null,
    2
  )});

const config = toESLintConfig(crafty, {});

export default config;
`;
}

/**
 * Configuration for jsLint command
 *
 * @returns
 */
function jsLintConfiguration() {
  const extraConfig = extractConfig(process.argv);

  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
import { initialize } from "${CRAFTY_PATH}";
import { toESLintConfig } from "${ESLINT_PRESET_PATH}";

const extraConfig = ${JSON.stringify(extraConfig, null, 2)};

const config = toESLintConfig(null, extraConfig);

//console.log(JSON.stringify(config, null, 2));

export default config;
`;
}

function toTempFile(content) {
  const tmpfile = tmp.fileSync({ postfix: ".mjs" }).name;

  fs.writeFileSync(tmpfile, content);

  return tmpfile;
}

module.exports = {
  ideConfiguration,
  toolConfiguration,
  jsLintConfiguration,
  toTempFile,
  toESLintConfig
};
